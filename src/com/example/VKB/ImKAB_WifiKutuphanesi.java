/*******************************************************************************
 * ImKAB_WifiKutuphanesi.java
 *
 * AMAÇ:
 *
 * Bu sınıf ile ImKAB_WifiKutuphanesi işlemleri gerçeklenmektedir. ImKAB_WifiKutuphanesi
 * Wifi üzerinden dosya alma ve dosya gönderme işlemlerini yapılabilmektedir. 
 * Bu sınıf Im_WifiVeriGonder ve Im_WifiVeriAl fonksiyonlarına sahiptir.
 *
 * ERİŞİM: Public
 *
 * GLOBAL DEĞİŞKENKER:
 * 
 * Socket soket
 *
 * FONKSİYON PROTOTİPLERİ:
 *
 * public void Im_WifiVeriGonder( final String str_ip_adres, 
 *								  final int i_port_numarasi, 
 *								  final String str_gonderilecek_veri )
 *
 * public void Im_WifiVeriAl( final int i_port_numarasi,
 *							  final String str_dosya_yolu,
 *							  final String str_dosya_adi )
 * 
 * GELİŞTİRME GEÇMİŞİ:
 *
 * Yazar: Cem YENİÇERİ
 * Tarih: 09.05.2013
 * Güncelleme Tarihi: 
 * Versiyon: v_1.0
 *
 */

package com.example.VKB;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;


public class ImKAB_WifiKutuphanesi 
{
	Socket soket;
	
	/********************************************************************************************
	 * 
	 * FONKSİYON ADI: 				Im_WifiVeriGonder
	 * FONKSİYON AÇIKLAMASI: 		Bu fonksiyon ile belirtilen dosya yolu üzerinde bulunan bir XML
	 * dosyası  belirtilen IP adresi ve port numarasına gönderilebilmektedir.
	 *
	 * ERİŞİM: Public
	 * 
	 * PARAMETRELER: 
	 * 			ADI						TİPİ				AÇIKLAMASI
	 *			str_ip_adres			String				Gönderilecek olan IP adresine ait bilgilerin tutulduğu parametredir.
	 *			i_port_numarasi			int					Gönderme işlemi için kullanılacak olan Port Numarası bilgisinin tutulduğu parametredir.
	 *			str_gonderilecek_veri	String				Gönderilecek olan dosyaya ait yolun tutulduğu parametredir.
	 *
	 * DÖNÜŞ:	
	 * 			ADI						TİPİ				AÇIKLAMASI		
	 * 
	 * GEREKLİLİK:	
	 *
	 ********************************************************************************************/	
	public void Im_WifiVeriGonder( final String str_ip_adres, 
								   final int i_port_numarasi, 
								   final String str_gonderilecek_veri
								  )
	{
		/**
		 * Api level 11'den sonraki sürümlerde soket işlemlerinin yapılabilmesi için bir thread yaratılması
		 * gerekmektedir. Bu nedenle soket ile yapılacak işlemler bir thread ve run fonksiyonu altında
		 * yazılmıştır.
		 */
		new Thread( new Runnable() 
		{
			/*Thread in çalıştırdığı run() fonksiyonu oluşturulmuştur.*/
			public void run() 
			{    
				try 
				{
					/* Belirtilen Ip Adresi ve Port Numarası için soket oluşturulmuştur. */
	                soket = new Socket( str_ip_adres, i_port_numarasi ); 
	                
	                	/** 
	                	 * Verilen dosya yolu üzerindeki dosya, File tipinde dosya oluşturularak
	                	 * okunmuştur.
	                	 */
		                File dosya = new File ( str_gonderilecek_veri );
		                
		                /*Dosyanın gönderilebilmesi için dosya boyutunda bir byte dizisi açılmıştır.*/
		                byte [] byte_dizi = new byte [ (int) dosya.length() ];
		                
		                /*Açılan FileInputStream yardımı ile açılan dosya byte olarak okunmuştur.*/
		                FileInputStream fis_dosyadan_byte_oku = new FileInputStream( dosya );
		                
		                /*FileInputStream ile okunan bytelar diziye yazılmak için  BufferedInputStream'de tutulmuştur.*/
						BufferedInputStream okunan_bytelari_buffara_yaz = new BufferedInputStream( fis_dosyadan_byte_oku );
		                
		                /**
		                 * Dosyadan okunan stream şeklindeki veriler read methodu ile 0. indexten başlanarak
		                 * uzunluğu kadar okunup ByteDizi değişkenine kaydedilmiştir.
		                 */
		                okunan_bytelari_buffara_yaz.read( byte_dizi, 0, byte_dizi.length);
		                
		                /*OutputStream yardımı ile soket gönderme işlemi için tanımlanmıştır.*/
		                OutputStream byte_olarak_ciktisini_gonder = soket.getOutputStream();
		                
		                /** 
		                 * Gönderme işlemi write metodu ile yapılmış ve flush metodu ile kapatılmıştır.
		                 * ilk parametre olarak ByteDizi değişkeni yazılıp, dizinin 0. parametresinden başlanarak
		                 * dizinin boyu kadar veri yazılmıştır. 
		                 */
		                byte_olarak_ciktisini_gonder.write( byte_dizi, 0, byte_dizi.length );
		                byte_olarak_ciktisini_gonder.flush();
		                
		                /*İşlemi bitiren soket kapatılmıştır.*/
		                soket.close();
				}
				catch (IOException e) 
				{
				} 
			}
		}).start();
	}

	/********************************************************************************************
	 * 
	 * FONKSİYON ADI: 				Im_WifiVeriAl
	 * FONKSİYON AÇIKLAMASI: 		Bu fonksiyon belirtilen port numarasından, istemci tarafından gönderilen
	 * dosyayı alıp belirtilen dosya yoluna kaydeden fonksiyondur.
	 *  
	 *
	 * ERİŞİM: Public
	 * 
	 * PARAMETRELER: 
	 * 			ADI						TİPİ				AÇIKLAMASI
	 *			i_PortNumarasi			int					Alım işlemi için kullanılacak olan Port Numarası bilgisinin tutulduğu parametredir.
	 *			str_dosya_yolu			String				Alınan dosyanın kaydedileceği yolun tutulduğu parametredir.(/sdcard/ şeklinde olmalıdır.)
	 *			str_dosya_adi			String				Alınan dosyanın kaydedileceği ismin tutulduğu değişkendir.
	 * 
	 * DÖNÜŞ:	
	 * 			ADI						TİPİ				AÇIKLAMASI			
	 *
	 * GEREKLİLİK: 					Cihazın Wi-Fi özelliğinin açık olup, IP numarasının  ve port adresinin 
	 * gönderici cihaz tarafından bilinmesi gereklidir.  
	 *
	 *********************************************************************************************/	
	public void Im_WifiVeriAl( final int i_port_numarasi,
							   final String str_dosya_yolu,
							   final String str_dosya_adi
							 )
	{
		/**
		 * Api level 11'den sonraki sürümlerde soket işlemlerinin yapılabilmesi için bir thread yaratılması
		 * gerekmektedir. Bu nedenle soket ile yapılacak işlemler bir thread ve run fonksiyonu altında
		 * yazılmıştır.
		 */
		new Thread(new Runnable() 
		{
			public void run()
			{
				/** 
				 * Veri alımı yapabilmek için ServerSocket sınıfından nesnemize referans olacak server_soket
				 * örneğimiz yaratıldı.Henüz bir nesneye referans olmadığından null olarak ilk değeri verildi. 
				 */
				ServerSocket sunucu_soket = null;
				
				/**
				 * Veri göndermek isteyen istemciye ait soketi tutan değişkendir.
				 * Başlangıç değeri henüz bir istemci olmadığı için null olarak atanmıştır.
				 */
	    	    Socket istemci_soket = null;
	    	    
	    	    /** 
	    	     * İstemci soketinden gelen girdi akışını tutabilmek için oluşturulmuştur.
	    	     * Başlangıç değeri henüz bir girdi akışı olmadığı için null olarak atanmıştır
	    	     */
	    	    InputStream girdi_akisi = null;
	    	    
	    	    /* İstenilen yerde dosya oluşturabilmek için oluşturulmuştur. */
	    	    FileOutputStream dosya_cikti_akisi = null;
	    	    
	    	    /*Çıktı akışının sağlanabilmesi için tamponlanmis_cikti_akisi referans değişkeni yaratıldı.*/
	    	    BufferedOutputStream tamponlanmis_cikti_akisi;
	    	    
	    	    int i_dosya_boyutu = 10000000;		/*Başlangıçta dosya boyutuna ilk değer olarak 10000000 verildi.*/
	    	    int i_okunan_byte_sayisi = 0;		/*Başlangıçta okunan byte değeri 0 olarak verildi. */
	    	    int i_durum = 0;					/*Daha sonra kullanılmak üzere i_durum değişkeni yaratıldı. */

			    try 
			    {
			    	
			    	/* İstenilen port numarasında soket açılmıştır. İnternet üzerinde iletişim soketler aracılığıyla yapılmaktadır. */
					sunucu_soket = new ServerSocket( i_port_numarasi );
					
					/** 
					 * İstemci tarafından gelcek istekler accept() metodu ile beklenir. 
					 * Bekelenen istek geldiğinde istemci_soket tipinde Socket nesnesi döndürür. 
					 */
					istemci_soket = sunucu_soket.accept();
					
					/* dosyayı tutabilmek için byte dizi oluşturulmuştur. */
					byte[] bytedizi = new byte[ i_dosya_boyutu ];   
					
					/** 
					 * İstemci soket tarafından gönderilmek istenen veriyi, okunmak üzere girdi_akisi olarak
					 * getInputStream() metodu ile döndürdük.
					 */
					girdi_akisi = istemci_soket.getInputStream();
					
				    try 
				    {
				    	/* oluşturulacak dosyanın yolu verilmiştir. */
						dosya_cikti_akisi = new FileOutputStream( str_dosya_yolu + str_dosya_adi + ".xml" );
						
					} 
				    
				    catch (FileNotFoundException e)
				    {
						e.printStackTrace();
					}
			    
				    /* yolu belirlenen dosya için tampon oluşturulur.*/
				    tamponlanmis_cikti_akisi = new BufferedOutputStream( dosya_cikti_akisi );
				    
				    /**
				     * Girdi akisina döndürülen veri 0. indeksten başlanarak sonuna kadar byte byte okunup bytedizi ye kaydedilmiştir.
				     * Okunan byte sayısı i_okunan_byte değişkenine atanmıştır. 
				     */
					i_okunan_byte_sayisi = girdi_akisi.read( bytedizi, 0, bytedizi.length );
				    i_durum = i_okunan_byte_sayisi;
		
			    
				    /**
				     * Bu kod bloğu dosya okuma işlemi tamamlanana kadar çalışacaktır.
				     */
				    do
				    {
				        try
				        {
				        	/* Eğer okunmayan veriler varsa kaldığı yerden okumaya devam edecektir.*/
							i_okunan_byte_sayisi = girdi_akisi.read( bytedizi, i_durum, ( bytedizi.length - i_durum ) );
						} 
				        
				        catch (IOException e)
				        {
							e.printStackTrace();
						}
			        
				        /*eğer bu blok içerisinde veri okunabilmiş ise i_durum değişkenine okunana byte miktarı eklenecektir.*/
				        if ( i_okunan_byte_sayisi >= 0 )
				        {
				            i_durum += i_okunan_byte_sayisi;
				        }
				        
				    } while ( i_okunan_byte_sayisi > -1 );  /* girdi_akisi.read() komutu okunacak bir veri kalmadığında -1 değerini döndürür.*/
			    
			    	/*yolu belirlenen dosya için oluşturulan tampona bytedizi de bulunan veriler 0. indexten başlanarak yazılır. */
					tamponlanmis_cikti_akisi.write( bytedizi, 0, i_durum );
					
					/* tamponlamis_cikti_akisi temizlenir.*/
					tamponlanmis_cikti_akisi.flush();
					
					/*tamponlanmis_cikti_akisi kapatılır.*/
					tamponlanmis_cikti_akisi.close();
					
					/*girdi_akisi kapatılır.*/
					girdi_akisi.close();
					
					/*istemci_soket kapatılır.*/
					istemci_soket.close();
					
					/*sunucu_soket kapatılır.*/
					sunucu_soket.close();
					
				}
			    catch (IOException e)
			    {
					e.printStackTrace();
				}
			}
	   }).start();
	}
}